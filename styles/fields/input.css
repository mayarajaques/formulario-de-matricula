input,
textarea,
select {
  appearance: none;
  /*tira a aparencia padrao dos itens*/
  width: 100%;
  /*tamanho de cada input*/
  border-radius: .5rem;   /*arrendondamento de borda*/
border: 2px solid transparent; /*colocando 2px transparente para nao mexer o campo na hora de selecionar*/
outline: 1px solid var(--stroke-default); /*cor ao clicar*/

  padding: .75rem 1rem;
  /*em cima/baixo e laterais*/

  font: var(--text);
}

label {
  font: var(--text-sm);
  color: var(--text-secondary);

  display: block;
  /*se n colocar block, ele vai ser inline e nao consigo colocar margem bottom*/
  margin-bottom: .25rem;
}

/*quando ta clicado*/
input:focus,
select:focus,
textarea:focus,
input[type="date"]:focus-within {
  /*pesquisa se algum elemento está em foco (selecionado*/
  
  outline: .25rem solid var(--surface-secondary);
  /*aplica a cor ao redor do inputdo lado de fora-- quando clicar*/
  border-color: var(--stroke-highlight);
  /*aplica a cor ao redor do input do lado de dentro- quando clicar*/
  outline-offset: .1px;
  /*para funcionar as cores acima no navegador safari*/

}

/*input que tenha o tipo date*/
input[type="date"] {
  position: relative;
  /*seletor*/

  &::-webkit-calendar-picker-indicator {
    opacity: 0;
    /*esconder a imagem  padrão do calendario nos navegadores*/
  }

  &::before {
    content: "";
    /*todo before precisa de um content, pq estou criando um elemento html*/
    position: absolute;
    background: url(../../assets/icons/calendar-03.svg) center/contain;
    /*centralizar e ficar dentro de onde tem disponivel*/
    right: 1rem;
    /*colocar no canto */
    width: 1.25rem;
    height: 1.25rem;

    top: 50%;
    /*alinhar elementos absolutos*/
    transform: translateY(-50%);
    /*pegando a metade do icone para colocar no meio*/

  }

}

select {
  background: url(../../assets/icons/arrow-down-01.svg) no-repeat calc(100% - 1rem);
  /*calcula o 100% e recua 1rem (16px)*/

}

.address .flex {
  /*na classe adress e quando tiver a classe flex*/
  gap: 1.25rem;
}

.input-wrapper:has([disabled]) {
  /*toda classe input-wrapper que tiver algum campo disabled entao pega ele inteiro e coloca opacidade*/
  opacity: .5;

}

input {
  &[disabled] {
    /*o input que seja desabilitado e tenha um atributo disable nele*/
    background-color: var(--surface-disable);
    border: 1px solid var(--stroke-default);
    color: var(--text-primary);
  }

  &:invalid {
    /*invalid campo email*/
    border: 0.125rem solid var(--semantic-error);
  }

  &+small {
    /*input que tenha small como irmao*/
    font: var(--text-sm);
    color: #78716C;

    display: inline-block;
    /*small tem por padrao inline. mas preciso fazer uma separação horizontal, entao preciso que ele seja block*/
    margin-top: .25rem;


  }

  &:invalid {
    /*quando o campo estiver invalido (required)*/
    border: 0.125rem solid var(--semantic-error);
  }

  &+small {
    /*input que tenha small como irmao*/
    font: var(---text-sm);
    color: #78716C;
    display: inline-block;
    /*preciso dar uma separação nele e ele é inline, para separar do item de cima preciso transformar ele para block*/
    margin-top: .25rem;
  }

  &[required]+ .error { /* se meu input tiver um required e ao lado dele tiver um error, aplica no irmao*/
display: flex;
align-items: center;
gap: .25rem;
font: var(--text-sm);
color: var(--semantic-error);
margin-top: .25rem ;

  }
  &:not(:focus):valid + .error{ /*se input tiver valido e nao estiver em foco e tiver um erro do lado dele, */
    display: none; /*tira a mensagem de invalido quando preencher*/
  }
}